{"version":3,"sources":["notes.min.js"],"names":["RevealNotes","notesPopup","openNotes","notesFilePath","closed","jsFileLocation","document","querySelector","src","replace","connectInterval","window","open","setInterval","postMessage","JSON","stringify","namespace","type","url","location","protocol","host","pathname","search","state","Reveal","getState","addEventListener","event","methodName","methodArguments","callId","result","data","parse","clearInterval","post","arguments","apply","alert","focus","slideElement","getCurrentSlide","notesElement","fragmentElement","messageData","notes","markdown","whitespace","hasAttribute","getAttribute","fragmentNotes","innerHTML","init","test","match","addKeyBinding","keyCode","key","description","registerPlugin"],"mappings":"AAWA,IAAIA,YAAc,WAEd,IAAIC,EAAa,KAEpB,SAASC,EAAWC,GAEb,IAAIF,GAAeA,EAAWG,OAA9B,CAKN,IAAKD,EAAgB,CACpB,IAAIE,EAAiBC,SAASC,cAAc,kCAAkCC,IAE9EL,GADAE,EAAiBA,EAAeI,QAAQ,yBAA0B,KACjC,aAgBlC,IAEKC,EAbL,GAFAT,EAAaU,OAAOC,KAAMT,EAAe,oBAAqB,yBAezDO,EAAkBG,YAAa,WAClCZ,EAAWa,YAAaC,KAAKC,UAAW,CACvCC,UAAW,eACXC,KAAM,UACNC,IAAKR,OAAOS,SAASC,SAAW,KAAOV,OAAOS,SAASE,KAAOX,OAAOS,SAASG,SAAWZ,OAAOS,SAASI,OACzGC,MAAOC,OAAOC,aACV,MACH,KAEHhB,OAAOiB,iBAAkB,UAAW,SAAUC,GAC7C,IAesBC,EAAYC,EAAiBC,EAEhDC,EAjBCC,EAAOnB,KAAKoB,MAAON,EAAMK,MACzBA,GAA2B,iBAAnBA,EAAKjB,WAA8C,cAAdiB,EAAKhB,OACrDkB,cAAe1B,GAiFjBgB,OAAOE,iBAAkB,eAAgBS,GACzCX,OAAOE,iBAAkB,gBAAiBS,GAC1CX,OAAOE,iBAAkB,iBAAkBS,GAC3CX,OAAOE,iBAAkB,iBAAkBS,GAC3CX,OAAOE,iBAAkB,gBAAiBS,GAC1CX,OAAOE,iBAAkB,SAAUS,GACnCX,OAAOE,iBAAkB,UAAWS,GAGpCA,KAvFKH,GAA2B,iBAAnBA,EAAKjB,WAA8C,SAAdiB,EAAKhB,OAUhCY,EATNI,EAAKJ,WASaC,EATDG,EAAKI,UASaN,EATFE,EAAKF,OAWnDC,EAASP,OAAOI,GAAYS,MAAOb,OAAQK,GAC/C9B,EAAWa,YAAaC,KAAKC,UAAW,CACvCC,UAAW,eACXC,KAAM,SACNe,OAAQA,EACRD,OAAQA,IACJ,aA7CLQ,MAAO,4GAbEvC,EAAWwC,QAiErB,SAASJ,EAAMR,GAEd,IAAIa,EAAehB,OAAOiB,kBACzBC,EAAeF,EAAanC,cAAe,eAC3CsC,EAAkBH,EAAanC,cAAe,qBAE3CuC,EAAc,CACjB7B,UAAW,eACXC,KAAM,QACN6B,MAAO,GACPC,UAAU,EACVC,WAAY,SACZxB,MAAOC,OAAOC,YAUf,GANIe,EAAaQ,aAAc,gBAC9BJ,EAAYC,MAAQL,EAAaS,aAAc,cAC/CL,EAAYG,WAAa,YAItBJ,EAAkB,CACrB,IAAIO,EAAgBP,EAAgBtC,cAAe,eAC/C6C,EACHR,EAAeQ,EAEPP,EAAgBK,aAAc,gBACtCJ,EAAYC,MAAQF,EAAgBM,aAAc,cAClDL,EAAYG,WAAa,WAGzBL,EAAe,MAKbA,IACHE,EAAYC,MAAQH,EAAaS,UACjCP,EAAYE,SAAmE,iBAAjDJ,EAAaO,aAAc,kBAG1DlD,EAAWa,YAAaC,KAAKC,UAAW8B,GAAe,MA4BzD,MAAO,CACNQ,KAAM,WAEA,YAAYC,KAAM5C,OAAOS,SAASI,UAGmB,OAArDb,OAAOS,SAASI,OAAOgC,MAAO,mBACjCtD,IAIDwB,OAAO+B,cAAc,CAACC,QAAS,GAAIC,IAAK,IAAKC,YAAa,sBAAuB,WAChF1D,QAOHU,KAAMV,GAjKU,GAsKlBwB,OAAOmC,eAAgB,QAAS7D","file":"../notes.min.js","sourcesContent":["/**\n * Handles opening of and synchronization with the reveal.js\n * notes window.\n *\n * Handshake process:\n * 1. This window posts 'connect' to notes window\n *    - Includes URL of presentation to show\n * 2. Notes window responds with 'connected' when it is available\n * 3. This window proceeds to send the current presentation state\n *    to the notes window\n */\nvar RevealNotes = (function() {\n\n    var notesPopup = null;\n\n\tfunction openNotes( notesFilePath ) {\n\n        if (notesPopup && !notesPopup.closed) {\n            notesPopup.focus();\n            return;\n        }\n\n\t\tif( !notesFilePath ) {\n\t\t\tvar jsFileLocation = document.querySelector('script[src$=\"js/notes.min.js\"]').src;  // this js file path\n\t\t\tjsFileLocation = jsFileLocation.replace(/notes\\.min\\.js(\\?.*)?$/, '');   // the js folder path\n\t\t\tnotesFilePath = jsFileLocation + 'notes.html';\n\t\t}\n\n\t\tnotesPopup = window.open( notesFilePath, 'reveal.js - Notes', 'width=1100,height=700' );\n\n\t\tif( !notesPopup ) {\n\t\t\talert( 'Speaker view popup failed to open. Please make sure popups are allowed and reopen the speaker view.' );\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Connect to the notes window through a postmessage handshake.\n\t\t * Using postmessage enables us to work in situations where the\n\t\t * origins differ, such as a presentation being opened from the\n\t\t * file system.\n\t\t */\n\t\tfunction connect() {\n\t\t\t// Keep trying to connect until we get a 'connected' message back\n\t\t\tvar connectInterval = setInterval( function() {\n\t\t\t\tnotesPopup.postMessage( JSON.stringify( {\n\t\t\t\t\tnamespace: 'reveal-notes',\n\t\t\t\t\ttype: 'connect',\n\t\t\t\t\turl: window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search,\n\t\t\t\t\tstate: Reveal.getState()\n\t\t\t\t} ), '*' );\n\t\t\t}, 500 );\n\n\t\t\twindow.addEventListener( 'message', function( event ) {\n\t\t\t\tvar data = JSON.parse( event.data );\n\t\t\t\tif( data && data.namespace === 'reveal-notes' && data.type === 'connected' ) {\n\t\t\t\t\tclearInterval( connectInterval );\n\t\t\t\t\tonConnected();\n\t\t\t\t}\n\t\t\t\tif( data && data.namespace === 'reveal-notes' && data.type === 'call' ) {\n\t\t\t\t\tcallRevealApi( data.methodName, data.arguments, data.callId );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Calls the specified Reveal.js method with the provided argument\n\t\t * and then pushes the result to the notes frame.\n\t\t */\n\t\tfunction callRevealApi( methodName, methodArguments, callId ) {\n\n\t\t\tvar result = Reveal[methodName].apply( Reveal, methodArguments );\n\t\t\tnotesPopup.postMessage( JSON.stringify( {\n\t\t\t\tnamespace: 'reveal-notes',\n\t\t\t\ttype: 'return',\n\t\t\t\tresult: result,\n\t\t\t\tcallId: callId\n\t\t\t} ), '*' );\n\n\t\t}\n\n\t\t/**\n\t\t * Posts the current slide data to the notes window\n\t\t */\n\t\tfunction post( event ) {\n\n\t\t\tvar slideElement = Reveal.getCurrentSlide(),\n\t\t\t\tnotesElement = slideElement.querySelector( 'aside.notes' ),\n\t\t\t\tfragmentElement = slideElement.querySelector( '.current-fragment' );\n\n\t\t\tvar messageData = {\n\t\t\t\tnamespace: 'reveal-notes',\n\t\t\t\ttype: 'state',\n\t\t\t\tnotes: '',\n\t\t\t\tmarkdown: false,\n\t\t\t\twhitespace: 'normal',\n\t\t\t\tstate: Reveal.getState()\n\t\t\t};\n\n\t\t\t// Look for notes defined in a slide attribute\n\t\t\tif( slideElement.hasAttribute( 'data-notes' ) ) {\n\t\t\t\tmessageData.notes = slideElement.getAttribute( 'data-notes' );\n\t\t\t\tmessageData.whitespace = 'pre-wrap';\n\t\t\t}\n\n\t\t\t// Look for notes defined in a fragment\n\t\t\tif( fragmentElement ) {\n\t\t\t\tvar fragmentNotes = fragmentElement.querySelector( 'aside.notes' );\n\t\t\t\tif( fragmentNotes ) {\n\t\t\t\t\tnotesElement = fragmentNotes;\n\t\t\t\t}\n\t\t\t\telse if( fragmentElement.hasAttribute( 'data-notes' ) ) {\n\t\t\t\t\tmessageData.notes = fragmentElement.getAttribute( 'data-notes' );\n\t\t\t\t\tmessageData.whitespace = 'pre-wrap';\n\n\t\t\t\t\t// In case there are slide notes\n\t\t\t\t\tnotesElement = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for notes defined in an aside element\n\t\t\tif( notesElement ) {\n\t\t\t\tmessageData.notes = notesElement.innerHTML;\n\t\t\t\tmessageData.markdown = typeof notesElement.getAttribute( 'data-markdown' ) === 'string';\n\t\t\t}\n\n\t\t\tnotesPopup.postMessage( JSON.stringify( messageData ), '*' );\n\n\t\t}\n\n\t\t/**\n\t\t * Called once we have established a connection to the notes\n\t\t * window.\n\t\t */\n\t\tfunction onConnected() {\n\n\t\t\t// Monitor events that trigger a change in state\n\t\t\tReveal.addEventListener( 'slidechanged', post );\n\t\t\tReveal.addEventListener( 'fragmentshown', post );\n\t\t\tReveal.addEventListener( 'fragmenthidden', post );\n\t\t\tReveal.addEventListener( 'overviewhidden', post );\n\t\t\tReveal.addEventListener( 'overviewshown', post );\n\t\t\tReveal.addEventListener( 'paused', post );\n\t\t\tReveal.addEventListener( 'resumed', post );\n\n\t\t\t// Post the initial state\n\t\t\tpost();\n\n\t\t}\n\n\t\tconnect();\n\n\t}\n\n\treturn {\n\t\tinit: function() {\n\n\t\t\tif( !/receiver/i.test( window.location.search ) ) {\n\n\t\t\t\t// If the there's a 'notes' query set, open directly\n\t\t\t\tif( window.location.search.match( /(\\?|\\&)notes/gi ) !== null ) {\n\t\t\t\t\topenNotes();\n\t\t\t\t}\n\n\t\t\t\t// Open the notes when the 's' key is hit\n\t\t\t\tReveal.addKeyBinding({keyCode: 83, key: 'S', description: 'Speaker notes view'}, function() {\n\t\t\t\t\topenNotes();\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\topen: openNotes\n\t};\n\n})();\n\nReveal.registerPlugin( 'notes', RevealNotes );\n"]}